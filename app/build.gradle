apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
                arguments = [moduleName: project.getName()]
            }
        }

//        splits {
//            abi {
//                enable true
//                reset()
//                include 'x86', 'armeabi-v7a','x86_64'
//                universalApk true
//            }
//        }

        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi'
        }

        manifestPlaceholders = [
                XG_ACCESS_ID:"2100342492",
                XG_ACCESS_KEY : "A5DA843U8NKD",
        ]
    }

    signingConfigs {
        config {
            storeFile file("../htwt.jks")
            storePassword "htwt123456"
            keyAlias "htwt"
            keyPassword "htwt123456"
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "htwt_c_${defaultConfig.versionName}_${releaseTime()}.apk"
                }
            }
        }
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled true
    }
    dexOptions {
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "6g"//越大越好
        incremental true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
//
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':cdcommon')
    //路由
    //arouter
    implementation 'com.youth.banner:banner:1.4.10'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.google.android:flexbox:0.3.1'
    implementation 'com.android.support:cardview-v7:27.0.2'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.android.support:support-v4:26.1.0'
    annotationProcessor rootProject.ext.arouterCompiler
    api rootProject.ext.arouterApi

    // 腾讯云 实时音视频
    implementation 'com.tencent.ilivesdk:ilivesdk:1.9.4.6.4'
//    implementation ('com.tencent.ilivesdk:ilivesdk:1.9.4.6.4')
//            {
//                exclude group: 'com.tencent.wup'
//            }

    //信鸽3.2.6以上的版本
    //完整的信鸽依赖四个都必须有，如果发生依赖冲突请根据对应的依赖版本号选择高版本的依赖。（使用jcenter自动接入请确认libs中没有信鸽的相关jar包）
    //信鸽jar，不包含厂商通道
    implementation  'com.tencent.xinge:xinge:4.3.2-release'
    //jg包
    implementation'com.tencent.jg:jg:1.1'
    //wup包 com.tencent.ilivesdk依赖库里面已经有了这个库，再次使用的话会出现重复依赖的问题
//    implementation 'com.tencent.wup:wup:1.0.0.E-Release'
    //mid包，minSdkVersion 14
    implementation 'com.tencent.mid:mid:4.0.7-Release'
    // jiaozivideoplayer
    compile 'cn.jzvd:jiaozivideoplayer:7.0.5'
    // 卡片滑动效果
    implementation 'rouchuan.viewpagerlayoutmanager:viewpagerlayoutmanager:2.0.22'
    // 微信
    api 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'
}
///格式化打完完成后APK名称中的时间
def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC+8"))
}
